/*
 * MIT License
 *
 * Copyright (c) 2021 P2O-Lab <p2o-lab@mailbox.tu-dresden.de>,
 * Chair for Process Control Systems, Technische UniversitÃ¤t Dresden
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

@startuml

skinparam monochrome true


participant Spec
participant MockupServer
participant MockupServer.Object
participant Polaris_Backend


group construct MockupServer
Spec -> MockupServer: new MockupServer(port)
Spec <- MockupServer: Response(namespace, rootObject)
activate MockupServer
end

group populate MockupServer for specific test
Spec -> MockupServer: add Object(namespace, rootObject)
MockupServer -> MockupServer.Object: new Object(namespace, rootObject)
end
Spec -> MockupServer: start()
activate MockupServer.Object
group get MockupServer JSON
Spec -> MockupServer: getMockupServerJSON()
group collect partial instance JSON
MockupServer -> MockupServer.Object: getObjectMockupJSON()
MockupServer <- MockupServer.Object: ObjectMockupJSON
end
Spec <- MockupServer: MockupServerJSON
end
Spec -> Polaris_Backend: load Object(MockupServerJSON)

group connect Objects
Spec -> Polaris_Backend: Connect Object
activate Polaris_Backend
Polaris_Backend -> MockupServer.Object: connect()
Polaris_Backend <-> MockupServer.Object: initialize
end

group execute tests
Spec -> MockupServer.Object: Inject ObjectChanges
Spec -> Polaris_Backend: Test Instructions
end

group disconnect Objects
Spec -> Polaris_Backend: Disconnect Object
Polaris_Backend -> MockupServer.Object: disconnect()
Spec <- Polaris_Backend: Response
deactivate Polaris_Backend
end

group destruct MockupServer
Spec -> MockupServer: shutdown()
MockupServer --> MockupServer.Object
deactivate MockupServer
deactivate MockupServer.Object
end
@enduml
