/*
 * MIT License
 *
 * Copyright (c) 2021 P2O-Lab <p2o-lab@mailbox.tu-dresden.de>,
 * Chair for Process Control Systems, Technische Universit√§t Dresden
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
 
@startuml
'https://plantuml.com/class-diagram
!include ./dataAssembly/DataAssembly.puml
!include ./serviceSet/service/service.puml
!include ./connection/Connection.puml



class PEA{
    + //readonly// options: PEAOptions
    + //readonly// id: string
    + //readonly// pimadIdentifier: string
    + //readonly// name: string;

    + services: Service[]
    + variables: DataAssembly[]
    + protected: boolean
    + connection: OpcUaConnection

    - //readonly// description: string
    - //readonly// hmiUrl: string
    - //readonly// logger: Category

    + PEA(options: PEAOptions, protectedPEA = false)
    + updateConnection(options: ServerSettingsOptions): void
    + getService(serviceName: string): Service
    + getServiceStates(): ServiceInterface[]
    + getPossibleStateChange(): any
    + overwatchRTCondition(): any
    + //async// connectAndSubscribe(): Promise<void>
    + //async// disconnectAndSubscribe(): Promise<void>
    + json(): PEAInterface
    + isConnected(): boolean
    + listenToDataAssembly(dataAssemblyName: string, variableName: string): DataItemEmitter
    + abort(): Promise<void[]>
    + pause(): Promise<void[]>
    + resume(): Promise<void[]>
    + hold(): Promise<void[]>
    + stop(): Promise<void[]>
    + reset(): Promise<void[]>

    - subscribeToAllVariables(): Promise<DataAssembly[]>
    - unsubscribeFromAllVariables(): void
    - subscribeToAllServices(): Promise<StrictEventEmitter<EventEmitter, ServiceEvents, ServiceEvents, "addEventListener" | "removeEventListener", "on" | "addListener" | "removeListener" | "once" | "emit">[]>
    - unsubscribeFromAllServices(): void


}

PEA *-- "0..*" DataAssembly
PEA *-- "0..*" Service
PEA *-- "1" Connection

PEAEmitter <|-- PEA


@enduml
