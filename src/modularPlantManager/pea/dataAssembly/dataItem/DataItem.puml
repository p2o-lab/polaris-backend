/*
 * MIT License
 *
 * Copyright (c) 2021 P2O-Lab <p2o-lab@mailbox.tu-dresden.de>,
 * Chair for Process Control Systems, Technische Universit√§t Dresden
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
 
@startuml
'https://plantuml.com/class-diagram

interface BaseDataItem{
    + changedAfterCreation: boolean
	+ readonly createdTimestamp: Date
	+ defaultValue: T
	+ lastChange: Date
	+ value: T
	+ read():Promise<T>
	+ write(value: T): Promise<void>
}


abstract class ADataItem{
    + readonly id = IDProvider.generateIdentifier
    # _defaultValue: T
    # _value: T
    # _lastChange: Date = new Date
    + readonly createdTimestamp = new Date
    + readonly access: Access = Access.NoAccess
    # _dataType: 'string' | 'number' | 'boolean'
	# logger: Category = catDataItem

	+ get defaultValue(): T
	+ get lastChange(): Date
	+ get changedAfterCreation(): boolean
	+ get value(): T
	+ ADataItem(options: DataItemModel, dataType: 'string' | 'number' | 'boolean')
	+ get Type(): string

    + abstract write(value: T): Promise<void>
    + abstract read(): Promise<T>

    -  getInitialValue(defaultValue?: string): T

}
DataItemEmitter <|-- DataItem

class StaticDataItem{
    + StaticDataItem(options: DataItemModel, dataType: 'string' | 'number' | 'boolean')
    + read(): Promise<T>
    + write<T>(value: T): Promise<void>
}
ADataItem<|-- StaticDataItem

abstract class DynamicDataItem{
       # readonly ciData: CIData
       # readonly connectionHandler: ConnectionHandler
       # eventReference = ''

       # DynamicDataItem(options: DataItemModel, dataType: 'string' | 'number' | 'boolean', connectionHandler: ConnectionHandler)
       - addToMonitoring(): void
       # stopMonitoring(): void

}
DynamicDataItem *- CIData
DynamicDataItem *- ConnectionHandler
ADataItem<|-- DynamicDataItem

class OpcUaDataItem{
	- readonly dataType: string
	+ readonly access: Access

	+ OpcUaData(options: DataItemModel, dataType: 'string' | 'number' | 'boolean', connectionHandler: ConnectionHandler)
    + async write<T extends number | string | boolean>(value: T): Promise<void>
    + async read()(): Promise<T>
}
OpcUaDataItem *- DataItemAccessLevel
DynamicDataItem <|-- OpcUaDataItem


@enduml
