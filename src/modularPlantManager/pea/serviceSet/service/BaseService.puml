/*
 * MIT License
 *
 * Copyright (c) 2021 P2O-Lab <p2o-lab@mailbox.tu-dresden.de>,
 * Chair for Process Control Systems, Technische Universit√§t Dresden
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
 
@startuml
'https://plantuml.com/class-diagram
!include Service.puml

abstract class BaseService{
    + readonly eventEmitter: BaseServiceEmitter
    + _name!: string
    + _lastStatusChange: Date = new Date()
    + _selfCompleting = false

    + get qualifiedName(): string
    + abstract get state(): ServiceState
    + abstract get commandEnable(): CommandEnableInterface
    + get name(): string
    + get lastStatusChange(): Date
    + set selfCompleting(value: boolean)
    + abstract setParameters(parameters: Array<Parameter | ParameterOptions>, peaSet?: PEAController[]): Promise<void>
    + isCommandExecutable(command: ServiceCommand): boolean
    + async executeCommand(command: ServiceCommand): Promise<void>
    + waitForStateChange(expectedState: string): Promise<void>
    + async waitForStateChangeWithTimeout(expectedState: string, ms = 1000): Promise<void>
    + abstract async start(): Promise<void>
    + abstract async stop(): Promise<void>
    + abstract async reset(): Promise<void>
    + abstract async complete(): Promise<void>
    + abstract async abort(): Promise<void>
    + abstract async hold(): Promise<void>
    + abstract async unhold(): Promise<void>
    + abstract async pause(): Promise<void>
    + abstract async resume(): Promise<void>
    + abstract async restart(): Promise<void>
}

BaseService <|-- Service
@enduml
