/*
 * MIT License
 *
 * Copyright (c) 2021 P2O-Lab <p2o-lab@mailbox.tu-dresden.de>,
 * Chair for Process Control Systems, Technische Universit√§t Dresden
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
 
@startuml
'https://plantuml.com/class-diagram
!include procedure/Procedure.puml

class Service{
    + readonly eventEmitter!: ServiceEmitter;
    + readonly procedures: Procedure[] = [];
    + readonly parameters: ServParam[] = [];
    + readonly connection: OpcUaConnection;
    + serviceControl: ServiceControl;
    - readonly logger: Category;
    - serviceParametersEventEmitters: EventEmitter[];
    - readonly _parentId: string;

    + Service(serviceOptions: ServiceOptions, connection: OpcUaConnection, parentId: string)
    + get qualifiedName(): string
    + get commandEnable(): CommandEnableInterface
    + get state(): ServiceState
    + get lastStatusChange(): Date
    + get currentProcedure(): number | undefined
    + getDefaultProcedure(): Procedure | undefined
    + getCurrentProcedure(): Procedure |undefined
    + async subscribeToService(): Promise<ServiceEmitter>
    + unsubscribe()
    + json(): ServiceInterface
    + async executeCommandAndWaitForStateChange(command: ServiceCommand): Promise<void>
    + abstract async start(): Promise<void>
    + abstract async stop(): Promise<void>
    + abstract async reset(): Promise<void>
    + abstract async complete(): Promise<void>
    + abstract async abort(): Promise<void>
    + abstract async hold(): Promise<void>
    + abstract async unhold(): Promise<void>
    + abstract async pause(): Promise<void>
    + abstract async resume(): Promise<void>
    + abstract async restart(): Promise<void>
    + async setProcedure(procedure: Procedure): Promise<void>
    + getProcedureByNameOrDefault(procedureName: string): Procedure | undefined
    + async setParameters(parameterOptions: ParameterOptions[], peaSet: PEAController[] = []): Promise<void>
    + async setOperationMode(): Promise<void>
    + findInputParameter(parameterName: string): InputElement | ServParam | undefined
    - clearListeners(): void
    - async sendCommand(command: ServiceMtpCommand): Promise<void>
}

Service *-down- "1..*" Procedure: has
Service *-left- "0..*" ConfigurationParameter

abstract class ServiceParameter

ServiceParameter <|-- ConfigurationParameter

@enduml
