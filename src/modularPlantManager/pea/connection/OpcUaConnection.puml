/*
 * MIT License
 *
 * Copyright (c) 2021 P2O-Lab <p2o-lab@mailbox.tu-dresden.de>,
 * Chair for Process Control Systems, Technische Universit√§t Dresden
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
 
@startuml
'https://plantuml.com/class-diagram

class OpcUaConnection{
	+ //readonly// endpoint: string
	+ //readonly// id: string
	+ //readonly// username: string | undefined
    + //readonly// password: string | undefined
	- session: ClientSession | undefined
	- client: OPCUAClient | undefined
	- subscription: ClientSubscription | undefined
	- namespaceArray!: string[]
	- //readonly// items: Map<string, string>
	- //readonly// logger: Category

	+ OpcUaConnection(targetId: string, endpoint: string, username?: string, password?: string) {
	+ //async// connect(): Promise<void>
    + //async// disconnect(): Promise<void>
    + isConnected(): boolean
    + //async// readNode(nodeId: string, namespaceUri: string): Promise<DataValue | undefined>
    + addOpcUaNode(nodeId: string, namespaceUri: string): string
    + //async// startListening(samplingInterval=100): Promise<EventEmitter>
    + //async// writeNode(nodeId: string, namespaceUri: string, value: number | string | boolean, dataType: string): Promise<void>
    + monitoredItemSize(): number
    - resolveNodeId(nodeId: string, namespaceUri: string): NodeId
    - //async// readNameSpaceArray(): Promise<any>
    - //async// createAndConnectClient(): Promise<OPCUAClient>
    - //async// createSession()
    - //async// createSubscription()
}
OpcUaConnectionEmitter <|-- OpcUaConnection

@enduml

