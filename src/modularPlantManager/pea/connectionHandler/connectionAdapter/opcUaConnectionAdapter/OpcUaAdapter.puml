/*
 * MIT License
 *
 * Copyright (c) 2021 P2O-Lab <p2o-lab@mailbox.tu-dresden.de>,
 * Chair for Process Control Systems, Technische Universit√§t Dresden
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
 
@startuml
'https://plantuml.com/class-diagram

class OpcUaAdapter{

	+ //readonly// id: string
	+ //readonly// name: string
	+ //readonly// logger: Category

	- _endpoint: string | undefined
	- currentEndpointId: string | undefined
	- availableEndpoints: Map<string, EndpointInfo>

	- namespaceArray: string[]
	- session: ClientSession | undefined
	- client: OPCUAClient | undefined
	- subscription: ClientSubscription | undefined
	- monitoringActive = false

	- //readonly// nodes: Map<string, CIData>
	- dataItemNodeMapping: Map<string, NodeId>
	- nodeDataTypeMapping: Map<NodeId, DataType>

	+ //get// connected(): boolean
	+ //get// endpoint(): string | undefined
	+ //set// endpoint(value: string | undefined)
	+ OpcUaAdapter(options?: OpcUaConnectionAdapterOptions)
	+ //async// initialize(options?: OpcUaConnectionAdapterOptions): Promise<void>
	+ //async// update(options: OpcUaConnectionAdapterOptions,)
	- //async// updateAvailableEndpoints(): Promise<void>
	- getSecurityMode(): string | undefined
	- getSecurityPolicy(): string | undefined
	+ //async// connect(endpointConfig: OpcUaEndpointSetting): Promise<void>
	+ //async// disconnect(): Promise<void>
	+ //async// readNode(ciData: CIData): Promise<DataValue | undefined>
	- //async// getBuiltInDataType(nodeId: NodeId): Promise<undefined | DataType>
	+ //async// writeNode(ciData: CIData, value: number | string | boolean): Promise<void>
	+ addDataItemToMonitoring(ciData: CIData, identifier?: string): string
	- findAlreadyMonitoredNode(ciData: CIData): string | undefined
	+ removeNodeFromMonitoring(identifier: string): void
	+ //async// startMonitoring(samplingInterval = 100): Promise<void>
	+ //async// stopMonitoring(): Promise<void>
	+ monitoredNodesCount(): number
	+ clearMonitoredNodes(): void
	- createClient(): void
	- //async// connectClient(): Promise<void>
	- //async// disconnectClient(): Promise<void>
	- //async// createSession(userIdentityOptions?: OpcUaUserSetting): Promise<void>
	- //async// closeSession(): Promise<void>
	+ //async// createSubscription(): Promise<void>
	- //async// stopSubscription(): Promise<void>
	- //async// resolveNodeIdDataType(nodeId: NodeId): Promise<DataType>
	- resolveNodeId(ciData: CIData, identifier?: string): NodeId
	- resolveNamespaceIndex(namespace: string): number
	- checkNamespaceIndexExists(namespaceIndex: number): boolean
	- findNamespaceIndex(namespace: string): number
	- //async// readNameSpaceArray(): Promise<void>
	- validEndPointUrl(endpointUrl: string): boolean
	+ getAdapterInfo(): OpcUaAdapterInfo

}
OpcUaConnectionAdapterEmitter <|-- OpcUaAdapter

@enduml

