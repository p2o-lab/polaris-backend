/*
 * MIT License
 *
 * Copyright (c) 2021 P2O-Lab <p2o-lab@mailbox.tu-dresden.de>,
 * Chair for Process Control Systems, Technische Universit√§t Dresden
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
 
@startuml
'https://plantuml.com/class-diagram
!include ./recipe/Recipe.puml
!include ./recipe/RecipeRun.puml
!include ./polService/POLService.puml
!include ./recipe/Player.puml
!include ./pea/PEAController.puml
!include ./pea/PiMAdParser/PiMAdParser.puml

class ModularPlantManager{
    + //readonly// recipes: Recipe[]
    + //readonly// peas: PEAController[]
    + //readonly// polServices: POLService[]
    + //readonly// player: Player

    + variableArchive: VariableChange[]
    + serviceArchive: ServiceLogEntry[]

    - _autoResetTimeout: number = 500

    + pimadPool: PEAPool

    + generateUniqueIndentifier(): string

    + getAllPEAControllers(): PEAInterface[]
    + getPEAController(peaId: string): PEAController
    + //async// removePEAController(peaID: string): Promise<void>
    + //async// loadPEAController(pimadIdentifier: string, protectedPEAs: boolean): Promise<PEAController[]>

    + getAllPEAsFromPimadPool(callback: (response: PiMAdResponse) => void)
    + getPEAFromPimadPool(pimadIdentifier: string): Promise<PEAModel>
    + deletePEAFromPimadPool(pimadIdentifier: string, callback: (response: PiMAdResponse) => void)
    + addPEAToPimadPool(filePath: { source: string}, callback: (response: PiMAdResponse) => void)

    + getPOLServices(): POLServiceInterface[]
    + instantiatePOLService(options: POLServiceOptions): void
    + removePOLService(polServiceID: string): void

    + loadRecipe(options: RecipeOptions, protectedRecipe = false): Recipe
    + updateServerSettings(options: ServerSettingsOptions): void

    + abortAllServices(): Promise<Promise<void[]>[][]>
    + stopAllServices(): Promise<Promise<void[]>[][]>
    + resetAllServices(): Promise<Promise<void[]>[][]>

    + removeRecipe(recipeID: string): void
    + getService(peaName: string, serviceName: string): Service
    + performAutoReset(service: Service): void

    - setEventListeners(newPEAs: PEAController[]): PEAController[]

}

ModularPlantManager "1" o-- "*" RecipeRun
ModularPlantManager "1" o-- "1" Player
ModularPlantManager "1" o-- "*" PEAController
ModularPlantManager  o-- "*" POLService


@enduml
