/*
 * MIT License
 *
 * Copyright (c) 2021 P2O-Lab <p2o-lab@mailbox.tu-dresden.de>,
 * Chair for Process Control Systems, Technische Universit√§t Dresden
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
 
@startuml
'https://plantuml.com/class-diagram
!include ../pea/serviceSet/service/BaseService.puml

abstract class POLService{

    + //static// type: string
    # procedureParameters: ParameterInterface[]
    # processValuesIn: ParameterInterface[]
    # processValuesOut: ParameterInterface[]
    # reportParameters: ParameterInterface[]

    # POLService(name: string)
    # _controlEnable: CommandEnableInfo
    + get commandEnable(): CommandEnableInfo
    #  _state: ServiceState = ServiceState.IDLE
    + get state(): ServiceState
    + json(): POLServiceInterface
    + //async// setParameters(parameters: Array<Parameter | ParameterOptions>): Promise<void>
    + //async// start(): Promise<void>
    + //async// restart(): Promise<void>
    + //async// pause(): Promise<void>
    + //async// resume(): Promise<void>
    + //async// complete(): Promise<void>
    + //async// stop(): Promise<void>
    + //async// abort(): Promise<void>
    + //async// reset(): Promise<void>
    + //async// hold(): Promise<void>
    + //async// unhold(): Promise<void>
    # abstract initParameter(): void
    # //async// onStarting(): Promise<void>
    # //async// onRestarting(): Promise<void>
    # //async// onExecute(): Promise<void>
    # //async// onPausing(): Promise<void>
    # //async// onPaused(): Promise<void>
    # //async// onResuming(): Promise<void>
    # //async// onCompleting(): Promise<void>
    # //async// onCompleted(): Promise<void>
    # //async// onResetting(): Promise<void>
    # //async// onAborting(): Promise<void>
    # //async// onAborted(): Promise<void>
    # //async// onStopping(): Promise<void>
    # //async// onStopped(): Promise<void>
    # //async// onIdle(): Promise<void>
    # //async// onHolding(): Promise<void>
    # //async// onHeld(): Promise<void>
    # //async// onUnholding(): Promise<void>
    - setState(newState: ServiceState): void
    - setControlEnable(commandEnable: CommandEnableInfo): void
    - //async// gotoStarting(): Promise<void>
    - //async// gotoRestarting(): Promise<void>
    - //async// gotoExecute(): Promise<void>
    - //async// gotoPausing(): Promise<void>
    - //async// gotoPaused(): Promise<void>
    - //async// gotoResuming(): Promise<void>
    - //async// gotoCompleting(): Promise<void>
    - //async// gotoCompleted(): Promise<void>
    - //async// gotoStopping(): Promise<void>
    - //async// gotoStopped(): Promise<void>
    - //async// gotoAborting(): Promise<void>
    - //async// gotoAborted(): Promise<void>
    - //async// gotoResetting(): Promise<void>
    - //async// gotoIdle(): Promise<void>
    - //async// gotoHolding(): Promise<void>
    - //async// gotoHeld(): Promise<void>
    - //async// gotoUnholding(): Promise<void>

}

POLService <|-- AggregatedService
POLService <|-- FunctionGenerator
POLService <|-- PidController
POLService <|-- Timer
POLService <|-- Storage

@enduml
